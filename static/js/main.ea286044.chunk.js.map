{"version":3,"sources":["constants.js","components/Node/Node.jsx","components/Board/Board.jsx","algorithms/Timer.js","components/Header/Header.jsx","components/NavBar/NavBar.jsx","components/HelpModal/HelpModal.jsx","algorithms/Pathfinder.js","algorithms/Dijkstra.js","algorithms/AStar.js","algorithms/BreadthFirstSearch.js","algorithms/DepthFirstSearch.js","algorithms/factory.js","components/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["DELAY_SPEEDS","value","name","ALGORITHM_TYPES","WEIGHT_MAPPING","WEIGHT_REVERSE","MARKS","label","Node","props","setType","setState","type","setIsVisited","isVisited","isAnimated","setIsShortest","isShortest","forceNodeUpdate","forceUpdate","state","rowIdx","colIdx","updateNodeCache","set","this","start","finish","y","x","extraClassNames","id","className","getNodeClassNames","data-row-idx","data-col-idx","getPathClassNames","React","PureComponent","Board","handleMouseDown","e","updateNodeType","drawType","target","classList","contains","Number","dataset","isStartPos","mode","isFinishPos","current","handleTouchStart","handleMouseUp","handleTouchEnd","handleMouseMove","isStartOrFinishPos","dragNode","dragVisualize","handleTouchMove","nodePos","prevX","prevY","get","isPathVisualized","clearBoard","initPathfinder","pathfinder","run","prevPos","window","addEventListener","removeEventListener","posX","posY","board","onMouseDown","onMouseMove","onTouchStart","onTouchMove","map","row","key","col","Timer","callback","delay","pause","clearTimeout","remaining","Date","now","resume","setTimeout","clear","Header","handleVisualize","setIsVisualizing","setIsPathVisualized","delayInterval","finalCounter","timer","timers","shift","push","handleClear","clearWalls","handlePause","isVisualizing","setPause","resumeTimers","pauseTimers","handleSelectAlgorithm","setAlgorithmType","handleSelectSpeed","setDelayInterval","handleSelectDrawType","setDrawType","classes","algorithmType","Grid","container","justify","alignItems","spacing","wrap","grid","item","FormControl","Select","native","onChange","labelId","algorithm","Button","variant","onClick","disabled","PlayArrow","Pause","center","color","ButtonGroup","aria-label","slider","Typography","Slider","getAriaValueText","valuetext","aria-labelledby","step","valueLabelDisplay","marks","min","max","track","withStyles","theme","marginTop","marginBottom","flex","width","minWidth","useStyles","makeStyles","separator","NavBar","handleHelpOpen","AppBar","position","elevation","Toolbar","noWrap","Link","href","underline","Tooltip","title","placement","enterDelay","arrow","IconButton","GitHub","aria-hidden","edge","Help","DialogTitle","root","padding","closeButton","right","top","palette","grey","children","onClose","other","disableTypography","DialogContent","MuiDialogContent","HelpModal","helpOpen","handleHelpClose","Dialog","open","scroll","dividers","Pathfinder","updateNodeIsVisited","updateNodeIsShortest","delayedIteration","clearTimers","isEmpty","toArray","forEach","traceShortestPath","timeCounter","prev","path","tempX","tempY","i","length","_init","Denque","dist","visited","j","Infinity","closed","dx","dy","Dijkstra","args","pq","TinyQueue","a","b","g","counter","pop","currentX","currentY","nextX","nextY","weight","AStar","calculateHeuristic","Math","abs","f","startF","nextF","BreadthFirstSearch","q","DepthFirstSearch","stk","PATHFINDER_MAPPING","Home","setupBoard","nodes","maxCol","trunc","innerWidth","maxRow","innerHeight","shorterRow","shorterCol","setHelpOpen","updateNode","updateNodeState","nodeType","Map","Fragment","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea286044.chunk.js","sourcesContent":["// Node Types\r\nexport const NODE_START = 'node-start';\r\nexport const NODE_FINISH = 'node-finish';\r\nexport const NODE_INITIAL = 'node-initial';\r\nexport const NODE_WALL = 'node-wall';\r\n\r\nexport const NODE_VISITED = 'node-visited';\r\nexport const NODE_SHORTEST = 'node-shortest-path';\r\n\r\nexport const NODE_WEIGHT_10 = 'node-weight-10';\r\nexport const NODE_WEIGHT_20 = 'node-weight-20';\r\nexport const NODE_WEIGHT_30 = 'node-weight-30';\r\nexport const NODE_WEIGHT_40 = 'node-weight-40';\r\nexport const NODE_WEIGHT_50 = 'node-weight-50';\r\n\r\n// Delay Interval\r\nexport const DELAY_SLOW = 200;\r\nexport const DELAY_NORMAL = 50;\r\nexport const DELAY_FAST = 20;\r\n\r\nexport const DELAY_SPEEDS = [\r\n  { value: DELAY_SLOW, name: 'Slow' },\r\n  { value: DELAY_NORMAL, name: 'Normal' },\r\n  { value: DELAY_FAST, name: 'Fast' },\r\n];\r\n\r\n// Pathfinding Algorithms\r\nexport const DIJKSTRA = 'dijkstra';\r\nexport const A_STAR = 'a-star';\r\nexport const BFS = 'BFS';\r\nexport const DFS = 'DFS';\r\n\r\nexport const ALGORITHM_TYPES = [\r\n  { value: DIJKSTRA, name: \"Dijkstra's algorithm\" },\r\n  { value: A_STAR, name: 'A* search' },\r\n  { value: BFS, name: 'Breadth-first search' },\r\n  { value: DFS, name: 'Depth-first search' },\r\n];\r\n\r\n// Editing Modes\r\nexport const IDLE = 'idle';\r\nexport const DRAGGING_START = 'dragging-start';\r\nexport const DRAGGING_FINISH = 'dragging-finish';\r\nexport const DRAWING = 'drawing';\r\nexport const ERASING = 'erasing';\r\n\r\n// Node Weight Mapping\r\nexport const WEIGHT_MAPPING = {\r\n  [NODE_INITIAL]: 1,\r\n  [NODE_WEIGHT_10]: 10,\r\n  [NODE_WEIGHT_20]: 20,\r\n  [NODE_WEIGHT_30]: 30,\r\n  [NODE_WEIGHT_40]: 40,\r\n  [NODE_WEIGHT_50]: 50,\r\n  [NODE_WALL]: 60, // Infinity\r\n};\r\n\r\n// Node Weight Reverse Mapping\r\nexport const WEIGHT_REVERSE = {};\r\nWEIGHT_REVERSE[10] = NODE_WEIGHT_10;\r\nWEIGHT_REVERSE[20] = NODE_WEIGHT_20;\r\nWEIGHT_REVERSE[30] = NODE_WEIGHT_30;\r\nWEIGHT_REVERSE[40] = NODE_WEIGHT_40;\r\nWEIGHT_REVERSE[50] = NODE_WEIGHT_50;\r\nWEIGHT_REVERSE[WEIGHT_MAPPING[NODE_WALL]] = NODE_WALL;\r\n\r\n// Marks for weight/wall slider\r\nexport const MARKS = [\r\n  {\r\n    value: 10,\r\n    label: '10',\r\n  },\r\n  {\r\n    value: 20,\r\n    label: '20',\r\n  },\r\n  {\r\n    value: 30,\r\n    label: '30',\r\n  },\r\n  {\r\n    value: 40,\r\n    label: '40',\r\n  },\r\n  {\r\n    value: 50,\r\n    label: '50',\r\n  },\r\n  {\r\n    value: WEIGHT_MAPPING[NODE_WALL],\r\n    label: 'Wall',\r\n  },\r\n];\r\n","import React from 'react';\r\nimport './Node.css';\r\nimport {\r\n  NODE_INITIAL,\r\n  NODE_SHORTEST,\r\n  NODE_VISITED,\r\n  NODE_START,\r\n  NODE_FINISH,\r\n} from '../../constants';\r\n\r\nexport default class Node extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      type: NODE_INITIAL,\r\n      isVisited: false,\r\n      isShortest: false,\r\n      isAnimated: true,\r\n    };\r\n\r\n    const { rowIdx, colIdx } = this.props;\r\n    let { updateNodeCache } = this.props;\r\n    updateNodeCache.set(`${rowIdx}-${colIdx}`, {\r\n      setType: this.setType,\r\n      setIsVisited: this.setIsVisited,\r\n      setIsShortest: this.setIsShortest,\r\n      forceNodeUpdate: this.forceNodeUpdate,\r\n    });\r\n  }\r\n\r\n  setType = (value) => {\r\n    this.setState({ type: value });\r\n  };\r\n\r\n  setIsVisited = (value) => {\r\n    this.setState({ isVisited: value.isVisited, isAnimated: value.isAnimated });\r\n  };\r\n\r\n  setIsShortest = (value) => {\r\n    this.setState({\r\n      isShortest: value.isShortest,\r\n      isAnimated: value.isAnimated,\r\n    });\r\n  };\r\n\r\n  forceNodeUpdate = () => {\r\n    this.forceUpdate();\r\n  };\r\n\r\n  getNodeClassNames() {\r\n    const { rowIdx, colIdx, start, finish } = this.props;\r\n    if (rowIdx === start.y && colIdx === start.x) {\r\n      return ' ' + NODE_START;\r\n    }\r\n    if (rowIdx === finish.y && colIdx === finish.x) {\r\n      return ' ' + NODE_FINISH;\r\n    }\r\n    if (this.state.type === NODE_INITIAL) {\r\n      return '';\r\n    }\r\n    return ' ' + this.state.type;\r\n  }\r\n\r\n  getPathClassNames() {\r\n    let extraClassNames = '';\r\n    if (this.state.isVisited) {\r\n      extraClassNames += ' ' + NODE_VISITED;\r\n      if (!this.state.isAnimated) {\r\n        extraClassNames += '-unanimated';\r\n      }\r\n    }\r\n    if (this.state.isShortest) {\r\n      extraClassNames += ' ' + NODE_SHORTEST;\r\n      if (!this.state.isAnimated) {\r\n        extraClassNames += '-unanimated';\r\n      }\r\n    }\r\n    return extraClassNames;\r\n  }\r\n\r\n  render() {\r\n    // console.log('node rendered');\r\n    const { rowIdx, colIdx } = this.props;\r\n    return (\r\n      <div\r\n        id={`node-${rowIdx}-${colIdx}`}\r\n        className={`board__node${this.getNodeClassNames()}`}\r\n        data-row-idx={rowIdx}\r\n        data-col-idx={colIdx}\r\n        // data-type={this.state.type}\r\n      >\r\n        <div className={`board__path${this.getPathClassNames()}`} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Node from '../Node/Node';\r\nimport './Board.css';\r\nimport {\r\n  IDLE,\r\n  DRAGGING_START,\r\n  DRAGGING_FINISH,\r\n  DRAWING,\r\n  ERASING,\r\n  NODE_INITIAL,\r\n} from '../../constants';\r\n\r\nexport default class Board extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mode = IDLE;\r\n    this.prevPos = { x: -1, y: -1 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('mouseup', this.handleMouseUp);\r\n    window.addEventListener('touchend', this.handleTouchEnd);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('mouseup', this.handleMouseUp);\r\n    window.removeEventListener('touchend', this.handleTouchEnd);\r\n  }\r\n\r\n  isStartPos(posX, posY, start) {\r\n    return posX === start.x && posY === start.y;\r\n  }\r\n\r\n  isFinishPos(posX, posY, finish) {\r\n    return posX === finish.x && posY === finish.y;\r\n  }\r\n\r\n  isStartOrFinishPos(posX, posY, start, finish) {\r\n    return (\r\n      this.isStartPos(posX, posY, start) || this.isFinishPos(posX, posY, finish)\r\n    );\r\n  }\r\n\r\n  handleMouseDown = (e) => {\r\n    // e.preventDefault();\r\n    const { start, finish, updateNodeType, drawType } = this.props;\r\n\r\n    // e.target.className.indexOf('board__node') !== -1\r\n    if (!e.target.classList.contains('board__node')) {\r\n      return;\r\n    }\r\n\r\n    const rowIdx = Number(e.target.dataset.rowIdx);\r\n    const colIdx = Number(e.target.dataset.colIdx);\r\n    if (this.isStartPos(colIdx, rowIdx, start)) {\r\n      this.mode = DRAGGING_START;\r\n    } else if (this.isFinishPos(colIdx, rowIdx, finish)) {\r\n      this.mode = DRAGGING_FINISH;\r\n    } else {\r\n      // e.target.dataset.type === NODE_INITIAL\r\n      if (e.target.className === 'board__node') {\r\n        this.mode = DRAWING;\r\n        updateNodeType(rowIdx, colIdx, drawType.current); // NODE_WALL\r\n      } else {\r\n        this.mode = ERASING;\r\n        updateNodeType(rowIdx, colIdx, NODE_INITIAL);\r\n      }\r\n    }\r\n    // this.prevPos.y = rowIdx;\r\n    // this.prevPos.x = colIdx;\r\n  };\r\n  handleTouchStart = (e) => {\r\n    // e.preventDefault();\r\n    this.handleMouseDown(e);\r\n  };\r\n\r\n  handleMouseUp = (e) => {\r\n    this.mode = IDLE;\r\n  };\r\n  handleTouchEnd = (e) => {\r\n    // e.preventDefault();\r\n    this.handleMouseUp(e);\r\n  };\r\n\r\n  // Could throttle this function to optimize performance\r\n  handleMouseMove = (e) => {\r\n    let { start, finish } = this.props;\r\n    const { updateNodeType, drawType } = this.props;\r\n\r\n    // e.target.className.indexOf('board__node') !== -1\r\n    if (!e.target.classList.contains('board__node')) {\r\n      return;\r\n    }\r\n\r\n    const rowIdx = Number(e.target.dataset.rowIdx);\r\n    const colIdx = Number(e.target.dataset.colIdx);\r\n    // if (this.prevPos.y === rowIdx && this.prevPos.x === colIdx) {\r\n    //   return;\r\n    // }\r\n\r\n    switch (this.mode) {\r\n      case DRAGGING_START:\r\n        if (this.isStartOrFinishPos(colIdx, rowIdx, start, finish)) {\r\n          return;\r\n        }\r\n        this.dragNode(rowIdx, colIdx, start);\r\n        this.dragVisualize();\r\n        break;\r\n      case DRAGGING_FINISH:\r\n        if (this.isStartOrFinishPos(colIdx, rowIdx, start, finish)) {\r\n          return;\r\n        }\r\n        this.dragNode(rowIdx, colIdx, finish);\r\n        this.dragVisualize();\r\n        break;\r\n      case DRAWING:\r\n        updateNodeType(rowIdx, colIdx, drawType.current); // NODE_WALL\r\n        break;\r\n      case ERASING:\r\n        updateNodeType(rowIdx, colIdx, NODE_INITIAL);\r\n        break;\r\n    }\r\n    // this.prevPos.y = rowIdx;\r\n    // this.prevPos.x = colIdx;\r\n  };\r\n  handleTouchMove = (e) => {\r\n    this.handleMouseMove(e);\r\n    // e.preventDefault();\r\n  };\r\n\r\n  dragNode = (rowIdx, colIdx, nodePos) => {\r\n    const { updateNodeCache } = this.props;\r\n    const prevX = nodePos.x; // this.prevPos.x\r\n    const prevY = nodePos.y; // this.prevPos.y\r\n    nodePos.y = rowIdx;\r\n    nodePos.x = colIdx;\r\n    updateNodeCache.get(`${prevY}-${prevX}`).forceNodeUpdate();\r\n    updateNodeCache.get(`${rowIdx}-${colIdx}`).forceNodeUpdate();\r\n  };\r\n\r\n  dragVisualize = () => {\r\n    const {\r\n      isPathVisualized,\r\n      clearBoard,\r\n      initPathfinder,\r\n      pathfinder,\r\n    } = this.props;\r\n    if (isPathVisualized.current) {\r\n      clearBoard(false, false);\r\n      initPathfinder(false);\r\n      pathfinder.current.run();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // console.log('board rendered');\r\n    // Could pass in board lengths instead for optimizing performance\r\n    const { board, start, finish, updateNodeCache } = this.props;\r\n    return (\r\n      <div\r\n        id=\"board\"\r\n        onMouseDown={this.handleMouseDown}\r\n        onMouseMove={this.handleMouseMove}\r\n        // TODO: Handle issue of touch events not working properly - note: browser emulator simultaneously calls both mouse and touch events\r\n        onTouchStart={this.handleTouchStart}\r\n        onTouchMove={this.handleTouchMove}\r\n      >\r\n        {board.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx} id={`row-${rowIdx}`} className=\"board__row\">\r\n              {row.map((col, colIdx) => {\r\n                return (\r\n                  <Node\r\n                    key={`${rowIdx}-${colIdx}`}\r\n                    rowIdx={rowIdx}\r\n                    colIdx={colIdx}\r\n                    start={start}\r\n                    finish={finish}\r\n                    updateNodeCache={updateNodeCache}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default class Timer {\r\n  constructor(callback, delay) {\r\n    this.start = Date.now();\r\n    this.id = setTimeout(callback, delay);\r\n    this.callback = callback;\r\n    this.remaining = delay;\r\n  }\r\n\r\n  pause = () => {\r\n    clearTimeout(this.id);\r\n    this.remaining -= Date.now() - this.start;\r\n  };\r\n\r\n  resume = () => {\r\n    this.start = Date.now();\r\n    clearTimeout(this.id);\r\n    this.id = setTimeout(this.callback, this.remaining);\r\n  };\r\n\r\n  clear = () => {\r\n    clearTimeout(this.id);\r\n  };\r\n}\r\n","import React from 'react';\r\nimport Timer from '../../algorithms/Timer';\r\nimport {\r\n  ALGORITHM_TYPES,\r\n  DELAY_SPEEDS,\r\n  WEIGHT_MAPPING,\r\n  WEIGHT_REVERSE,\r\n  MARKS,\r\n  NODE_WALL,\r\n} from '../../constants';\r\nimport {\r\n  Grid,\r\n  Button,\r\n  ButtonGroup,\r\n  Select,\r\n  InputLabel,\r\n  FormControl,\r\n  Typography,\r\n  Slider,\r\n} from '@material-ui/core';\r\nimport { Pause, PlayArrow } from '@material-ui/icons';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = (theme) => ({\r\n  grid: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  center: {\r\n    flex: '0 2',\r\n  },\r\n  pause: { width: '40px', minWidth: '40px' },\r\n  slider: { width: 200 },\r\n});\r\nclass Header extends React.PureComponent {\r\n  handleVisualize = () => {\r\n    const {\r\n      clearBoard,\r\n      setIsVisualizing,\r\n      initPathfinder,\r\n      pathfinder,\r\n      setIsPathVisualized,\r\n      delayInterval,\r\n    } = this.props;\r\n    // if (pathfinder.current) {\r\n    //   pathfinder.current.clearTimers();\r\n    // }\r\n    clearBoard(false);\r\n    setIsVisualizing(true);\r\n\r\n    initPathfinder();\r\n    const finalCounter = pathfinder.current.run();\r\n    const timer = new Timer(\r\n      // callback\r\n      () => {\r\n        // setIsPathVisualized(true);\r\n        setIsVisualizing(false);\r\n        pathfinder.current.timers.shift();\r\n      }, // pathfinder.current.clearTimers()\r\n      finalCounter * delayInterval // delay\r\n    );\r\n    pathfinder.current.timers.push(timer);\r\n    setIsPathVisualized(true);\r\n  };\r\n\r\n  handleClear = (clearWalls) => {\r\n    const { clearBoard } = this.props;\r\n    // if (pathfinder.current) {\r\n    //   pathfinder.current.clearTimers();\r\n    // }\r\n\r\n    clearBoard(clearWalls);\r\n  };\r\n\r\n  handlePause = () => {\r\n    const { isVisualizing, pathfinder, pause, setPause } = this.props;\r\n    if (!isVisualizing) {\r\n      return;\r\n    }\r\n    if (pause) {\r\n      setPause(false);\r\n      pathfinder.current.resumeTimers();\r\n    } else {\r\n      setPause(true);\r\n      pathfinder.current.pauseTimers();\r\n    }\r\n  };\r\n\r\n  handleSelectAlgorithm = (e) => {\r\n    const { setAlgorithmType } = this.props;\r\n    setAlgorithmType(e.target.value);\r\n  };\r\n\r\n  handleSelectSpeed = (e) => {\r\n    const { setDelayInterval } = this.props;\r\n    setDelayInterval(e.target.value);\r\n  };\r\n\r\n  handleSelectDrawType = (e, value) => {\r\n    const { setDrawType } = this.props;\r\n    setDrawType(WEIGHT_REVERSE[value]);\r\n  };\r\n\r\n  valuetext(value) {\r\n    if (value === WEIGHT_MAPPING[NODE_WALL]) value = 'Wall';\r\n    return value;\r\n  }\r\n\r\n  render() {\r\n    // console.log('header rendered');\r\n    const {\r\n      classes,\r\n      isVisualizing,\r\n      algorithmType,\r\n      pause,\r\n      delayInterval,\r\n      drawType,\r\n    } = this.props;\r\n    return (\r\n      <Grid\r\n        container\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n        wrap=\"nowrap\"\r\n        className={classes.grid}\r\n      >\r\n        <Grid container item justify=\"flex-end\" alignItems=\"center\" spacing={2}>\r\n          <Grid item>\r\n            <FormControl>\r\n              {/* <InputLabel htmlFor=\"select-algorithm\">Algorithm</InputLabel> */}\r\n              <Select\r\n                native\r\n                value={algorithmType}\r\n                onChange={this.handleSelectAlgorithm}\r\n                id=\"select-algorithm\"\r\n                labelId=\"select-algorithm-label\"\r\n              >\r\n                {ALGORITHM_TYPES.map((algorithm) => {\r\n                  return (\r\n                    <option key={algorithm.value} value={algorithm.value}>\r\n                      {algorithm.name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControl>\r\n              {/* <InputLabel htmlFor=\"select-speed\">Speed</InputLabel> */}\r\n              <Select\r\n                native\r\n                value={delayInterval}\r\n                onChange={this.handleSelectSpeed}\r\n                id=\"select-speed\"\r\n                labelId=\"select-speed-label\"\r\n              >\r\n                {DELAY_SPEEDS.map((delay) => {\r\n                  return (\r\n                    <option key={delay.value} value={delay.value}>\r\n                      {delay.name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={this.handlePause}\r\n              disabled={!isVisualizing}\r\n              className={classes.pause}\r\n            >\r\n              {pause ? <PlayArrow /> : <Pause />}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n          className={classes.center}\r\n        >\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.handleVisualize}\r\n            >\r\n              Visualize\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          justify=\"flex-start\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          <Grid item>\r\n            <ButtonGroup color=\"secondary\" aria-label=\"clear button group\">\r\n              <Button onClick={() => this.handleClear(true)}>\r\n                Clear Board\r\n              </Button>\r\n              <Button onClick={() => this.handleClear(false)}>\r\n                Clear Path\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <div className={classes.slider}>\r\n              <Typography variant=\"subtitle2\" id=\"weight-slider\">\r\n                Weight\r\n              </Typography>\r\n              <Slider\r\n                value={WEIGHT_MAPPING[drawType]}\r\n                onChange={this.handleSelectDrawType}\r\n                getAriaValueText={this.valuetext}\r\n                aria-labelledby=\"weight-slider\"\r\n                step={10}\r\n                valueLabelDisplay=\"off\"\r\n                marks={MARKS}\r\n                min={10}\r\n                max={60}\r\n                track={false}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Header);\r\n","import React from 'react';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Link,\r\n  IconButton,\r\n  Tooltip,\r\n} from '@material-ui/core/';\r\nimport { GitHub, Help } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  // toolbar: {\r\n  //   display: 'flex',\r\n  //   justifyContent: 'space-between',\r\n  // },\r\n  separator: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nexport default function NavBar(props) {\r\n  const classes = useStyles();\r\n  const { handleHelpOpen } = props;\r\n\r\n  return (\r\n    <AppBar position=\"static\" elevation={0}>\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n          <Link href=\"/\" color=\"inherit\" underline=\"none\">\r\n            Pathfinding Visualizer\r\n          </Link>\r\n        </Typography>\r\n        <div className={classes.separator} />\r\n        <Tooltip\r\n          title=\"Github\"\r\n          aria-label=\"t-github\"\r\n          placement=\"bottom\"\r\n          enterDelay={250}\r\n          arrow\r\n        >\r\n          <IconButton\r\n            href=\"https://github.com/andrewywong/pathfinding-visualizer\"\r\n            color=\"inherit\"\r\n          >\r\n            <GitHub aria-hidden />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip\r\n          title=\"Help\"\r\n          aria-label=\"t-help\"\r\n          placement=\"bottom\"\r\n          enterDelay={250}\r\n          arrow\r\n        >\r\n          <IconButton onClick={handleHelpOpen} edge=\"end\" color=\"inherit\">\r\n            <Help aria-hidden />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon aria-hidden />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nexport default function HelpModal(props) {\r\n  const { helpOpen, handleHelpClose } = props;\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        onClose={handleHelpClose}\r\n        aria-labelledby=\"help-dialog\"\r\n        open={helpOpen}\r\n        scroll=\"paper\"\r\n      >\r\n        <DialogTitle id=\"help-dialog\" onClose={handleHelpClose}>\r\n          Help\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography>\r\n            1. Click on the board to add and remove walls/weights. <br />\r\n            2. Click and drag the start/end nodes to move them. <br />\r\n            3. Choose the algorithm and speed from the drop-down menus. <br />\r\n            4. Choose between adding walls or weights from the slider. <br />\r\n            5. Choose the cost of the weight node from the slider. <br />\r\n            6. Walls are impenetrable, whereas weights are costly to pass\r\n            through. <br />\r\n            7. Weighted algorithms (Djikstra and A*) will take weight nodes into\r\n            account. <br />\r\n            8. Unweighted algorithms(BFS and DFS) will ignore weight nodes (i.e.\r\n            treat the nodes as unweighted). <br />\r\n            9. DFS does not guarantee the shortest path.\r\n          </Typography>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import Denque from 'denque';\r\nexport default class Pathfinder {\r\n  constructor(\r\n    board,\r\n    start,\r\n    finish,\r\n    updateNodeIsVisited,\r\n    updateNodeIsShortest,\r\n    delayedIteration\r\n  ) {\r\n    this.start = start;\r\n    this.finish = finish;\r\n    this.updateNodeIsVisited = updateNodeIsVisited;\r\n    this.updateNodeIsShortest = updateNodeIsShortest;\r\n    this.delayedIteration = delayedIteration;\r\n    this._init(board);\r\n    // this.board = board;\r\n    this.timers = new Denque();\r\n  }\r\n\r\n  static dx = [0, 0, -1, 1];\r\n  static dy = [-1, 1, 0, 0];\r\n\r\n  _init(board) {\r\n    this.board = [];\r\n    this.dist = [];\r\n    this.visited = [];\r\n    this.prev = [];\r\n    for (let i = 0; i < board.length; ++i) {\r\n      this.board[i] = [];\r\n      this.dist[i] = [];\r\n      this.visited[i] = [];\r\n      this.prev[i] = [];\r\n      for (let j = 0; j < board[i].length; ++j) {\r\n        this.board[i][j] = { type: board[i][j].type };\r\n        this.dist[i][j] = Infinity;\r\n        this.visited[i][j] = false;\r\n        this.prev[i][j] = { x: -1, y: -1 };\r\n      }\r\n    }\r\n    this.closed = this.visited;\r\n  }\r\n\r\n  clearTimers = () => {\r\n    // this.timers.toArray().forEach((timer) => {\r\n    //   timer.clear();\r\n    // });\r\n    // this.timers = new Denque();\r\n    while (!this.timers.isEmpty()) {\r\n      let timer = this.timers.shift();\r\n      timer.clear();\r\n    }\r\n    this.timers.clear();\r\n  };\r\n\r\n  pauseTimers = () => {\r\n    this.timers.toArray().forEach((timer) => timer.pause());\r\n  };\r\n\r\n  resumeTimers = () => {\r\n    this.timers.toArray().forEach((timer) => timer.resume());\r\n  };\r\n\r\n  // returns latest timeCounter\r\n  traceShortestPath = (timeCounter) => {\r\n    const { finish, prev, updateNodeIsShortest, delayedIteration } = this;\r\n\r\n    const path = [];\r\n    let { x, y } = prev[finish.y][finish.x];\r\n\r\n    while (prev[y][x].x !== -1 && prev[y][x].y !== -1) {\r\n      path.push({ x, y });\r\n      const tempX = x;\r\n      const tempY = y;\r\n      x = prev[tempY][tempX].x;\r\n      y = prev[tempY][tempX].y;\r\n    }\r\n\r\n    for (let i = path.length - 1; i >= 0; --i) {\r\n      x = path[i].x;\r\n      y = path[i].y;\r\n\r\n      //timeCounter is 0 if delayedIteration is false\r\n      updateNodeIsShortest(\r\n        y,\r\n        x,\r\n        true,\r\n        timeCounter * delayedIteration,\r\n        delayedIteration\r\n      );\r\n      timeCounter += 1;\r\n    }\r\n    return timeCounter;\r\n  };\r\n}\r\n","import TinyQueue from 'tinyqueue';\r\nimport Pathfinder from './Pathfinder';\r\nimport { NODE_WALL, WEIGHT_MAPPING } from '../constants';\r\n\r\nexport default class Dijkstra extends Pathfinder {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.pq = new TinyQueue([], function (a, b) {\r\n      return a.g - b.g;\r\n    });\r\n  }\r\n\r\n  // Dijkstra is a variant of A* where the heuristic is zero\r\n  run() {\r\n    const {\r\n      pq,\r\n      dist,\r\n      closed,\r\n      prev,\r\n      board,\r\n      start,\r\n      finish,\r\n      updateNodeIsVisited,\r\n      delayedIteration,\r\n    } = this;\r\n\r\n    let counter = 0;\r\n    if (start.x === finish.x && start.y === finish.y) {\r\n      return counter;\r\n    }\r\n\r\n    pq.push({ x: start.x, y: start.y, g: 0 });\r\n    dist[start.y][start.x] = 0;\r\n\r\n    while (pq.length) {\r\n      const current = pq.pop();\r\n      const currentX = current.x;\r\n      const currentY = current.y;\r\n      // const currentG = current.g;\r\n\r\n      if (closed[currentY][currentX]) {\r\n        continue;\r\n      }\r\n      if (!(currentX === start.x && currentY === start.y)) counter += 1;\r\n      closed[currentY][currentX] = true;\r\n      if (currentX === finish.x && currentY === finish.y) {\r\n        return this.traceShortestPath(counter);\r\n      }\r\n      // Don't update node-visited for start/finish nodes\r\n      if (!(currentX === start.x && currentY === start.y)) {\r\n        updateNodeIsVisited(\r\n          currentY,\r\n          currentX,\r\n          true,\r\n          counter * delayedIteration,\r\n          delayedIteration\r\n        );\r\n      }\r\n\r\n      for (let i = 0; i < Pathfinder.dx.length; ++i) {\r\n        const nextX = currentX + Pathfinder.dx[i];\r\n        const nextY = currentY + Pathfinder.dy[i];\r\n        if (\r\n          nextX < 0 ||\r\n          nextX >= board[0].length ||\r\n          nextY < 0 ||\r\n          nextY >= board.length\r\n        ) {\r\n          continue;\r\n        }\r\n        if (closed[nextY][nextX]) {\r\n          continue;\r\n        }\r\n        if (\r\n          board[nextY][nextX].type === NODE_WALL &&\r\n          !(nextX === finish.x && nextY === finish.y)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        const weight = !(nextX === finish.x && nextY === finish.y)\r\n          ? WEIGHT_MAPPING[board[nextY][nextX].type]\r\n          : 1;\r\n        const g = dist[currentY][currentX] + weight;\r\n        // if there is a shorter path to nextPos\r\n        if (g < dist[nextY][nextX]) {\r\n          dist[nextY][nextX] = g;\r\n          prev[nextY][nextX] = { x: currentX, y: currentY };\r\n          pq.push({ x: nextX, y: nextY, g });\r\n        }\r\n      }\r\n    }\r\n    return counter;\r\n  }\r\n}\r\n","import TinyQueue from 'tinyqueue';\r\nimport Pathfinder from './Pathfinder';\r\nimport { NODE_WALL, WEIGHT_MAPPING } from '../constants';\r\n\r\nexport default class AStar extends Pathfinder {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.pq = new TinyQueue([], function (a, b) {\r\n      return a.f - b.f;\r\n    });\r\n  }\r\n\r\n  // Manhattan distance\r\n  calculateHeuristic = (posX, posY) => {\r\n    return Math.abs(posX - this.finish.x) + Math.abs(posY - this.finish.y);\r\n  };\r\n\r\n  run() {\r\n    const {\r\n      pq,\r\n      dist,\r\n      closed,\r\n      prev,\r\n      board,\r\n      start,\r\n      finish,\r\n      updateNodeIsVisited,\r\n      delayedIteration,\r\n      calculateHeuristic,\r\n    } = this;\r\n\r\n    let counter = 0;\r\n    if (start.x === finish.x && start.y === finish.y) {\r\n      return counter;\r\n    }\r\n\r\n    // f = g + h, initial g is 0\r\n    const startF = calculateHeuristic(start.x, start.y);\r\n    pq.push({ x: start.x, y: start.y, f: startF });\r\n    dist[start.y][start.x] = 0;\r\n\r\n    while (pq.length) {\r\n      const current = pq.pop();\r\n      const currentX = current.x;\r\n      const currentY = current.y;\r\n\r\n      if (closed[currentY][currentX]) {\r\n        continue;\r\n      }\r\n      if (!(currentX === start.x && currentY === start.y)) counter += 1;\r\n      closed[currentY][currentX] = true;\r\n      if (currentX === finish.x && currentY === finish.y) {\r\n        return this.traceShortestPath(counter);\r\n      }\r\n      // Don't update node-visited for start/finish nodes\r\n      if (!(currentX === start.x && currentY === start.y)) {\r\n        updateNodeIsVisited(\r\n          currentY,\r\n          currentX,\r\n          true,\r\n          counter * delayedIteration,\r\n          delayedIteration\r\n        );\r\n      }\r\n\r\n      for (let i = 0; i < Pathfinder.dx.length; ++i) {\r\n        const nextX = currentX + Pathfinder.dx[i];\r\n        const nextY = currentY + Pathfinder.dy[i];\r\n        if (\r\n          nextX < 0 ||\r\n          nextX >= board[0].length ||\r\n          nextY < 0 ||\r\n          nextY >= board.length\r\n        ) {\r\n          continue;\r\n        }\r\n        if (closed[nextY][nextX]) {\r\n          continue;\r\n        }\r\n        if (\r\n          board[nextY][nextX].type === NODE_WALL &&\r\n          !(nextX === finish.x && nextY === finish.y)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        const weight = !(nextX === finish.x && nextY === finish.y)\r\n          ? WEIGHT_MAPPING[board[nextY][nextX].type]\r\n          : 1;\r\n        const g = dist[currentY][currentX] + weight;\r\n        // f = g + h\r\n        const nextF = g + calculateHeuristic(nextX, nextY);\r\n        // if there is a shorter path to nextPos\r\n        if (g < dist[nextY][nextX]) {\r\n          dist[nextY][nextX] = g;\r\n          prev[nextY][nextX] = { x: currentX, y: currentY };\r\n          pq.push({ x: nextX, y: nextY, f: nextF });\r\n        }\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n}\r\n","import Denque from 'denque';\r\nimport Pathfinder from './Pathfinder';\r\nimport { NODE_WALL } from '../constants';\r\n\r\nexport default class BreadthFirstSearch extends Pathfinder {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.q = new Denque();\r\n  }\r\n\r\n  run() {\r\n    const {\r\n      q,\r\n      visited,\r\n      prev,\r\n      board,\r\n      start,\r\n      finish,\r\n      updateNodeIsVisited,\r\n      delayedIteration,\r\n    } = this;\r\n\r\n    let counter = 0;\r\n    if (start.x === finish.x && start.y === finish.y) {\r\n      return counter;\r\n    }\r\n\r\n    q.push({ x: start.x, y: start.y });\r\n    visited[start.y][start.x] = true;\r\n    while (!q.isEmpty()) {\r\n      const current = q.shift();\r\n\r\n      for (let i = 0; i < Pathfinder.dx.length; ++i) {\r\n        const nextX = current.x + Pathfinder.dx[i];\r\n        const nextY = current.y + Pathfinder.dy[i];\r\n        if (\r\n          nextX < 0 ||\r\n          nextX >= board[0].length ||\r\n          nextY < 0 ||\r\n          nextY >= board.length\r\n        ) {\r\n          continue;\r\n        }\r\n        if (visited[nextY][nextX]) {\r\n          continue;\r\n        }\r\n        if (\r\n          board[nextY][nextX].type === NODE_WALL &&\r\n          !(nextX === finish.x && nextY === finish.y)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        counter += 1;\r\n        visited[nextY][nextX] = true;\r\n        prev[nextY][nextX] = { x: current.x, y: current.y };\r\n        if (nextX === finish.x && nextY === finish.y) {\r\n          return this.traceShortestPath(counter);\r\n        }\r\n        updateNodeIsVisited(\r\n          nextY,\r\n          nextX,\r\n          true,\r\n          counter * delayedIteration,\r\n          delayedIteration\r\n        );\r\n\r\n        q.push({ x: nextX, y: nextY });\r\n      }\r\n    }\r\n    return counter;\r\n  }\r\n}\r\n","import Denque from 'denque';\r\nimport Pathfinder from './Pathfinder';\r\nimport { NODE_WALL } from '../constants';\r\n\r\nexport default class DepthFirstSearch extends Pathfinder {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.stk = new Denque();\r\n  }\r\n\r\n  run() {\r\n    const {\r\n      stk,\r\n      visited,\r\n      prev,\r\n      board,\r\n      start,\r\n      finish,\r\n      updateNodeIsVisited,\r\n      delayedIteration,\r\n    } = this;\r\n\r\n    let counter = 0;\r\n    if (start.x === finish.x && start.y === finish.y) {\r\n      return counter;\r\n    }\r\n\r\n    stk.push({ x: start.x, y: start.y });\r\n    while (!stk.isEmpty()) {\r\n      const current = stk.pop();\r\n      const currentX = current.x;\r\n      const currentY = current.y;\r\n\r\n      if (visited[currentY][currentX]) {\r\n        continue;\r\n      }\r\n      if (!(currentX === start.x && currentY === start.y)) counter += 1;\r\n      visited[currentY][currentX] = true;\r\n      if (currentX === finish.x && currentY === finish.y) {\r\n        return this.traceShortestPath(counter);\r\n      }\r\n      // Don't update node-visited for start/finish nodes\r\n      if (!(currentX === start.x && currentY === start.y)) {\r\n        updateNodeIsVisited(\r\n          currentY,\r\n          currentX,\r\n          true,\r\n          counter * delayedIteration,\r\n          delayedIteration\r\n        );\r\n      }\r\n\r\n      for (let i = 0; i < Pathfinder.dx.length; ++i) {\r\n        const nextX = current.x + Pathfinder.dx[i];\r\n        const nextY = current.y + Pathfinder.dy[i];\r\n        if (\r\n          nextX < 0 ||\r\n          nextX >= board[0].length ||\r\n          nextY < 0 ||\r\n          nextY >= board.length\r\n        ) {\r\n          continue;\r\n        }\r\n        if (visited[nextY][nextX]) {\r\n          continue;\r\n        }\r\n        if (\r\n          board[nextY][nextX].type === NODE_WALL &&\r\n          !(nextX === finish.x && nextY === finish.y)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        prev[nextY][nextX] = { x: current.x, y: current.y };\r\n        stk.push({ x: nextX, y: nextY });\r\n      }\r\n    }\r\n    return counter;\r\n  }\r\n}\r\n","import Dijkstra from './Dijkstra';\r\nimport AStar from './AStar';\r\nimport BreadthFirstSearch from './BreadthFirstSearch';\r\nimport DepthFirstSearch from './DepthFirstSearch';\r\nimport { DIJKSTRA, A_STAR, BFS, DFS } from '../constants';\r\n\r\nconst PATHFINDER_MAPPING = {\r\n  [DIJKSTRA]: Dijkstra,\r\n  [A_STAR]: AStar,\r\n  [BFS]: BreadthFirstSearch,\r\n  [DFS]: DepthFirstSearch,\r\n};\r\n\r\nexport default PATHFINDER_MAPPING;\r\n","import React, { Component } from 'react';\r\nimport Board from '../Board/Board';\r\nimport Header from '../Header/Header';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport HelpModal from '../HelpModal/HelpModal';\r\nimport { NODE_INITIAL, NODE_WALL, DIJKSTRA, DELAY_FAST } from '../../constants';\r\nimport Timer from '../../algorithms/Timer';\r\nimport PATHFINDER_MAPPING from '../../algorithms/factory';\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.board = [];\r\n    this.updateNodeCache = new Map();\r\n    this.pathfinder = {};\r\n\r\n    this.isPathVisualized = { current: false };\r\n    this.drawType = { current: NODE_WALL };\r\n    this.state = {\r\n      isVisualizing: false,\r\n      helpOpen: false,\r\n      delayInterval: DELAY_FAST,\r\n      algorithmType: DIJKSTRA,\r\n      pause: false,\r\n      drawType: NODE_WALL,\r\n    };\r\n    this.setupBoard();\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   // this.setupBoard();\r\n  //   // TODO: HANDLE ISSUE OF BOARD NOT RERENDERING\r\n  //   // https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\n  //   // Should throttle this event to optimize performance\r\n  //   window.addEventListener('resize', this.setupBoard);\r\n  // }\r\n\r\n  // componentWillUnmount() {\r\n  //   window.removeEventListener('resize', this.setupBoard);\r\n  // }\r\n\r\n  setupBoard = () => {\r\n    const nodes = [];\r\n    // Change rows and cols depending on the device width\r\n    const maxCol = Math.trunc(window.innerWidth / 25);\r\n    const maxRow = Math.trunc(window.innerHeight / 35);\r\n    // Note: maxRow and maxCol can be floats\r\n\r\n    if (!this.start || !this.finish) {\r\n      // Assign new start and finish values\r\n      this.start = {\r\n        x: Math.trunc(maxCol * (1 / 4)),\r\n        y: Math.trunc(maxRow / 2),\r\n      };\r\n      this.finish = {\r\n        x: Math.trunc(maxCol * (3 / 4)),\r\n        y: Math.trunc(maxRow / 2),\r\n      };\r\n    } else {\r\n      // Use preexisting start and finish values\r\n      if (this.start.y > maxRow) {\r\n        this.start.y = Math.trunc(maxRow);\r\n      }\r\n      if (this.start.x > maxCol) {\r\n        this.start.x = Math.trunc(maxCol);\r\n      }\r\n\r\n      if (this.finish.y > maxRow) {\r\n        this.finish.y = Math.trunc(maxRow);\r\n      }\r\n      if (this.finish.x > maxCol) {\r\n        this.finish.x = Math.trunc(maxCol);\r\n      }\r\n      // TODO: Handle issue of overlapping start and finish values\r\n    }\r\n\r\n    // Initialize board\r\n    for (let rowIdx = 0; rowIdx < maxRow; ++rowIdx) {\r\n      nodes[rowIdx] = [];\r\n      for (let colIdx = 0; colIdx < maxCol; ++colIdx) {\r\n        nodes[rowIdx][colIdx] = {\r\n          type: NODE_INITIAL,\r\n        };\r\n        // nodes[rowIdx][colIdx] = NODE_INITIAL;\r\n      }\r\n    }\r\n\r\n    // Copy over preexisting board\r\n    if (this.board && this.board.length) {\r\n      // board and board.length are truthy\r\n      const shorterRow = this.board.length < nodes.length ? this.board : nodes;\r\n      const shorterCol =\r\n        this.board[0].length < nodes[0].length ? this.board : nodes;\r\n      for (let rowIdx = 0; rowIdx < shorterRow.length; ++rowIdx) {\r\n        for (let colIdx = 0; colIdx < shorterCol[rowIdx].length; ++colIdx) {\r\n          // Deep Copy Methods\r\n          // JSON.parse(JSON.stringify(this.start));\r\n          // Object.assign({}, this.start);\r\n\r\n          // nodes[rowIdx][colIdx] = Object.assign({}, this.board[rowIdx][colIdx]);\r\n          nodes[rowIdx][colIdx] = { type: this.board[rowIdx][colIdx].type };\r\n        }\r\n      }\r\n\r\n      this.updateNodeCache\r\n        .get(`${this.finish.y}-${this.finish.x}`)\r\n        .forceNodeUpdate();\r\n      this.forceUpdate();\r\n    }\r\n\r\n    this.board = nodes;\r\n  };\r\n\r\n  // public class fields syntax\r\n  setIsVisualizing = (value) => {\r\n    this.setState({ isVisualizing: value });\r\n  };\r\n\r\n  setIsPathVisualized = (value) => {\r\n    this.isPathVisualized.current = value;\r\n  };\r\n\r\n  setAlgorithmType = (value) => {\r\n    this.setState({ algorithmType: value });\r\n  };\r\n\r\n  setDelayInterval = (value) => {\r\n    this.setState({ delayInterval: Number(value) });\r\n  };\r\n\r\n  setPause = (value) => {\r\n    this.setState({ pause: value });\r\n  };\r\n\r\n  setDrawType = (value) => {\r\n    this.drawType.current = value;\r\n    this.setState({ drawType: value });\r\n  };\r\n\r\n  setHelpOpen = (value) => {\r\n    this.setState({ helpOpen: value });\r\n  };\r\n\r\n  updateNode = (value, updateNodeState, timeCounter) => {\r\n    if (timeCounter) {\r\n      const timer = new Timer(\r\n        () => {\r\n          updateNodeState(value);\r\n          this.pathfinder.current.timers.shift();\r\n        }, // callback\r\n        timeCounter * this.state.delayInterval // delay\r\n      );\r\n      this.pathfinder.current.timers.push(timer);\r\n    } else {\r\n      updateNodeState(value);\r\n    }\r\n  };\r\n\r\n  updateNodeType = (\r\n    rowIdx,\r\n    colIdx,\r\n    nodeType = NODE_INITIAL,\r\n    timeCounter = 0\r\n  ) => {\r\n    this.board[rowIdx][colIdx].type = nodeType;\r\n    const setType = this.updateNodeCache.get(`${rowIdx}-${colIdx}`).setType;\r\n    this.updateNode(nodeType, setType, timeCounter);\r\n  };\r\n\r\n  updateNodeIsVisited = (\r\n    rowIdx,\r\n    colIdx,\r\n    isVisited = false,\r\n    timeCounter = 0,\r\n    isAnimated = true\r\n  ) => {\r\n    const setIsVisited = this.updateNodeCache.get(`${rowIdx}-${colIdx}`)\r\n      .setIsVisited;\r\n    this.updateNode({ isVisited, isAnimated }, setIsVisited, timeCounter);\r\n  };\r\n\r\n  updateNodeIsShortest = (\r\n    rowIdx,\r\n    colIdx,\r\n    isShortest = false,\r\n    timeCounter = 0,\r\n    isAnimated = true\r\n  ) => {\r\n    const setIsShortest = this.updateNodeCache.get(`${rowIdx}-${colIdx}`)\r\n      .setIsShortest;\r\n    this.updateNode({ isShortest, isAnimated }, setIsShortest, timeCounter);\r\n  };\r\n\r\n  clearBoard = (clearWalls = true, delayedIteration = true) => {\r\n    if (this.pathfinder.current) {\r\n      this.pathfinder.current.clearTimers();\r\n    }\r\n\r\n    this.board.forEach((row, rowIdx) => {\r\n      row.forEach((col, colIdx) => {\r\n        if (clearWalls) {\r\n          this.updateNodeType(rowIdx, colIdx, NODE_INITIAL);\r\n        }\r\n        //clearing path\r\n        this.updateNodeIsVisited(rowIdx, colIdx, false);\r\n        this.updateNodeIsShortest(rowIdx, colIdx, false);\r\n      });\r\n    });\r\n    if (delayedIteration) {\r\n      this.setIsPathVisualized(false);\r\n    }\r\n    this.setIsVisualizing(false);\r\n    this.setState({ pause: false });\r\n  };\r\n\r\n  initPathfinder = (delayedIteration = true) => {\r\n    this.pathfinder.current = new PATHFINDER_MAPPING[this.state.algorithmType](\r\n      this.board,\r\n      this.start,\r\n      this.finish,\r\n      this.updateNodeIsVisited,\r\n      this.updateNodeIsShortest,\r\n      delayedIteration\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar handleHelpOpen={() => this.setHelpOpen(true)} />\r\n        <HelpModal\r\n          helpOpen={this.state.helpOpen}\r\n          handleHelpClose={() => this.setHelpOpen(false)}\r\n        />\r\n        <Header\r\n          isVisualizing={this.state.isVisualizing}\r\n          delayInterval={this.state.delayInterval}\r\n          algorithmType={this.state.algorithmType}\r\n          pause={this.state.pause}\r\n          drawType={this.state.drawType}\r\n          pathfinder={this.pathfinder}\r\n          setIsVisualizing={this.setIsVisualizing}\r\n          setIsPathVisualized={this.setIsPathVisualized}\r\n          setDelayInterval={this.setDelayInterval}\r\n          setAlgorithmType={this.setAlgorithmType}\r\n          setPause={this.setPause}\r\n          setDrawType={this.setDrawType}\r\n          clearBoard={this.clearBoard}\r\n          initPathfinder={this.initPathfinder}\r\n        />\r\n        <Board\r\n          board={this.board}\r\n          isPathVisualized={this.isPathVisualized}\r\n          drawType={this.drawType}\r\n          updateNodeType={this.updateNodeType}\r\n          start={this.start}\r\n          finish={this.finish}\r\n          updateNodeCache={this.updateNodeCache}\r\n          pathfinder={this.pathfinder}\r\n          clearBoard={this.clearBoard}\r\n          initPathfinder={this.initPathfinder}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\nimport Home from './components/Home/Home';\r\n\r\nfunction App() {\r\n  return <Home />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'fontsource-roboto';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}